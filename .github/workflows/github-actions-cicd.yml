name: Build and Deploy

on: workflow_dispatch  
jobs:  
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        maven: 3.9.0

    - name: Build and test with Maven
      run: |
       mvn clean spring-javaformat:apply
       mvn  package -Dcheckstyle.skip
       mvn jacoco:report
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v5.0.0
      with:
        path: target/*
        retention-days: 1  

    - name: Generate JaCoCo badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        badges-directory: badges
        generate-branches-badge: true
        generate-summary: true

    - name: Log coverage percentages to workflow output
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branches = ${{ steps.jacoco.outputs.branches }}"
    - name: Upload JaCoCo coverage report as a workflow artifact
      uses: actions/upload-artifact@v5.0.0
      with:
        name: jacoco-report
        path: target/site/jacoco/


    - name: Comment on PR with coverage percentages
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        REPORT=$(<badges/coverage-summary.json)
        COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
        BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
        NEWLINE=$'\n'
        BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
        gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Get the Coverage info
      run: |
        echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"
        echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"       


  security:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # - name: Set execute permission for mvnw
      #   run: chmod +x mvnw
      # - name: Download CodeQL CLI
      #   run: |
      #         wget https://github.com/github/codeql-action/releases/latest/download/codeql-bundle-linux64.tar.gz
      #         mkdir -p codeql
      #         tar --strip-components=1 -xzf codeql-bundle-linux64.tar.gz -C codeql
      #         ls -lrt
      #         ls -l codeql
      #         export PATH=$PWD/codeql:$PATH
      #         $PWD/codeql/codeql --version
      # - name: Create CodeQL database
      #   run: |
      #       export PATH=$PWD/codeql:$PATH
      #       $PWD/codeql/codeql database create codeql-db \
      #       --language=java \
      #       --source-root=$PWD \
      #       --command="./mvnw clean compile spring-javaformat:apply -DskipTests -Dcheckstyle.skip"
      #       # $PWD/codeql/codeql database create codeql-db \
      #       #   --language=java \
      #       #   --source-root=$PWD
      # - name: Analyze with CodeQL
      #   run: |
      #       $PWD/codeql/codeql database analyze codeql-db \
      #         --format=sarif-latest \
      #         --output=results.sarif
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
      
      - name: Build project
        run: ./mvnw clean compile spring-javaformat:apply -DskipTests
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results

            
      - name: Upload CodeQL SARIF
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif-results
          path: codeql-results
      # - name: Run Snyk to check for vulnerabilities
      #   uses: snyk/actions/maven@master
      #   continue-on-error: true
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
      #   with:
      #     args: |
      #      --sarif-file-output=snyk.sarif
      #      --severity-threshold=high
      # - name: Verify SARIF file exists
      #   run: ls snyk.sarif
      # - name: Replace security-severity undefined for license-related findings 
      #   run: sed -i 's/"security-severity":"undefined"/"security-severity":"0"/g' snyk.sarif
     

      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v2
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     sarif_file: snyk.sarif    

  docker-build:
      permissions:
        contents: read
        security-events: write 
        actions: read 
      runs-on: ubuntu-latest
      needs: security
      steps:
       - name: Checkout code
         uses: actions/checkout@v2
         
       - name: Download JAR artifact
         uses: actions/download-artifact@v2
         with:
          path: target/*.jar

       - name: List downloaded artifacts
         run: |
           ls -lrt target      

       - name: docker login
         uses: docker/login-action@v1
         with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

       - name: Build and push Docker image
         uses: docker/build-push-action@v2
         with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ruth99/github-actions-pet-clinic:${{ github.sha }}

      

    
