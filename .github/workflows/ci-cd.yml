name: Build and Deploy

on: workflow_dispatch

  
jobs:
  
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        maven: 3.9.0

    - name: Build and test with Maven
      run: |
       mvn spring-javaformat:apply
       mvn package -Pcoverage
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v2
      with:
        path: target/*.jar
        retention-days: 1  

    - name: Generate JaCoCo badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        badges-directory: badges
        generate-branches-badge: true
        generate-summary: true

    - name: Log coverage percentages to workflow output
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branches = ${{ steps.jacoco.outputs.branches }}"
    - name: Upload JaCoCo coverage report as a workflow artifact
      uses: actions/upload-artifact@v3
      with:
        name: jacoco-report
        path: target/site/jacoco/


    - name: Comment on PR with coverage percentages
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        REPORT=$(<badges/coverage-summary.json)
        COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
        BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
        NEWLINE=$'\n'
        BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
        gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Get the Coverage info
      run: |
        echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"
        echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"     
      


  security:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set execute permission for mvnw
        run: chmod +x mvnw
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
        with:
          args: |
           --sarif-file-output=snyk.sarif
           --severity-threshold=high
      - name: Verify SARIF file exists
        run: ls snyk.sarif
      - name: Replace security-severity undefined for license-related findings 
        run: sed -i 's/"security-severity":"undefined"/"security-severity":"0"/g' snyk.sarif
     

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          sarif_file: snyk.sarif


    

  docker-build:
      permissions:
        contents: read # for actions/checkout to fetch code
        security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
        actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      runs-on: ubuntu-latest
      needs: security
      steps:
       - name: Checkout code
         uses: actions/checkout@v2
         
       - name: Download JAR artifact
         uses: actions/download-artifact@v2
         with:
          path: staging

       - name: List downloaded artifacts
         run: |
           ls -lrt staging

      

       - name: docker login
         uses: docker/login-action@v1
         with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

       - name: Build and push Docker image
         uses: docker/build-push-action@v2
         with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ruth99/github-actions-pet-clinic:${{ github.sha }}

       # - name: Run Snyk to check Docker image for vulnerabilities
       #   continue-on-error: true
       #   uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
       #   env:
       #    SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
       #   with:
       #     image: ruth99/github-actions-pet-clinic:${{ github.sha }}
       #     args: --sarif-file-output=snyk-report.sarif

       # - name: Verify SARIF file exists
       #   run: ls snyk-report.sarif


       # - name: Upload result to GitHub Code Scanning
       #   uses: github/codeql-action/upload-sarif@v2
       #   env:
       #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
       #   with:
       #    sarif_file: snyk-report.sarif
       - name: Scan Docker image
         uses: snyk/actions/docker@master
         continue-on-error: true
         with:
            image: ruth99/github-actions-pet-clinic:${{ github.sha }}
            args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk.sarif
         env:
              SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}

       # - name: Upload Snyk report as sarif
       #   uses: github/codeql-action/upload-sarif@v2
       #   env:
       #    SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
       #   with:
       #        sarif_file: snyk.sarif
       - name: Upload image scan result 
         uses: actions/upload-artifact@v2
         with:
          name: snyk-image-scan-result
          path: snyk.sarif
          retention-days: 3


  
  # ocp-deploy:
  #     runs-on: ubuntu-latest
  #     needs: docker-build
  #     steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v2

  #      - name: deployment
  #        run: |
  #         oc version
  #         oc login --token=${{ secrets.OCP_TOKEN }} --server=${{ vars.OCP_URL }}
  #         oc whoami
  #         oc project ${{ vars.OCP_PROJECT }}
  #         cd deploy
  #         ls -la
  #         helm ls -n ruth
  #         helm upgrade --install test-actions -f values.yaml --set image.tag=${{ github.sha }} . -n ${{ vars.OCP_PROJECT }}
